"use strict";const e=window.Web3Modal["default"];const n=window.WalletConnectProvider["default"];const i=window.evmChains;let s=null;let o=null;let c=null;const d="mainnet";const a="https://etherscan.io";class t{contractAddress="0x72ec46F3D5B8Df5b12bbd8A217fcB292afF0a14C";ethersProvider=new ethers.providers.JsonRpcProvider("https://mainnet-nethermind.blockscout.com/");contract=new ethers.Contract(this.contractAddress,ABI,this.ethersProvider);mintPrice=null;maxMintAmountPerAddress=0;numMintedByAddress=0;async getData(){const[t,e,n,i]=await Promise.all([this.contract.cost(),this.contract.totalSupply(),this.contract.maxSupply(),this.contract.maxMintAmountPerAddress()]);this.mintPrice=t;this.maxMintAmountPerAddress=Number(i);return{mintPrice:Number(t)/10**18,mintedAmount:Number(e),maxSupply:Number(n),maxMintAmountPerAddress:Number(i)}}async getFakeData(){const t=.023;const e=43;const n=5e3;const i=12;this.mintPrice=ethers.BigNumber.from((t*10**18).toString());this.maxMintAmountPerAddress=i;return{mintPrice:t,mintedAmount:e,maxSupply:n,maxMintAmountPerAddress:i}}async getWalletData(t){const[e]=await Promise.all([this.contract.getNumMintedByAddress(t)]);this.numMintedByAddress=Number(e);return{numMintedByAddress:Number(e)}}async getWalletFakeData(t){const e=12;this.numMintedByAddress=e;return{numMintedByAddress:e}}getMintTx(t,e){const n=this.contract["interface"].encodeFunctionData("mint",[t,e]);return{from:t,to:this.contractAddress,value:this.mintPrice.mul(e),data:n}}getTestTx(t){const e=this.contract["interface"].encodeFunctionData("setRoyalty",[t,1e3]);return{from:t,to:this.contractAddress,value:"0x0",data:e}}}class l{elements={connectedWallet:document.getElementById("connectedWallet"),blockState1:document.getElementById("blockState1"),blockState2:document.getElementById("blockState2"),connectWalletBtn:document.getElementById("connectWalletBtn"),checkContractBtn:document.getElementById("checkContractBtn"),mintBtn:document.getElementById("mintBtn"),mintBtnNotAvailable:document.getElementById("mintBtnNotAvailable"),mintPrice1:document.getElementById("mintPrice1"),mintPrice2:document.getElementById("mintPrice2"),mintedAmount1:document.getElementById("mintedAmount1"),mintedAmount2:document.getElementById("mintedAmount2"),remainingSupply1:document.getElementById("remainingSupply1"),available:document.getElementById("available"),selectedMintAmount:document.getElementById("selectedMintAmount"),mintAmountInput:document.getElementById("mintAmountInput")};selectedMintAmount=0;remainingSupply=0;async init(){this.elements.checkContractBtn.href=a+"/address/"+s.contractAddress;const t=await s.getData();this.setContractData(t);this.elements.connectWalletBtn.addEventListener("click",this.onConnectBtn.bind(this));this.elements.mintBtn.addEventListener("click",this.onMintBtn.bind(this));this.elements.mintAmountInput.addEventListener("input",()=>{this.elements.selectedMintAmount.innerHTML=this.elements.mintAmountInput.value;this.selectedMintAmount=Number(this.elements.mintAmountInput.value)})}setContractData(t){this.elements.mintPrice1.innerHTML=`${t.mintPrice} ETH`;this.elements.mintPrice2.innerHTML=`${t.mintPrice} ETH`;this.elements.mintedAmount1.innerHTML=`${t.mintedAmount}`;this.elements.mintedAmount2.innerHTML=`${t.mintedAmount}`;this.elements.remainingSupply1.innerHTML=`${t.maxSupply-t.mintedAmount}`;this.remainingSupply=t.maxSupply-t.mintedAmount}setWalletContractData(t){const e=Math.min(s.maxMintAmountPerAddress-t.numMintedByAddress,this.remainingSupply);this.elements.available.innerHTML=e;if(e>0){this.elements.selectedMintAmount.innerHTML=1;this.elements.mintAmountInput.min=1;this.elements.mintAmountInput.max=e;this.elements.mintAmountInput.value=1;this.selectedMintAmount=1;this.elements.mintBtn.style.display="block";this.elements.mintBtnNotAvailable.style.display="none"}else{this.elements.mintBtn.style.display="none";this.elements.mintBtnNotAvailable.style.display="block"}}goToState1(){this.elements.blockState1.style.display="block";this.elements.blockState2.style.display="none"}goToState2(){this.elements.blockState1.style.display="none";this.elements.blockState2.style.display="block"}setConnectedWallet(t){this.elements.connectedWallet.innerHTML=t.slice(0,6)+" ... "+t.slice(-4);this.elements.connectedWallet.addEventListener("click",()=>this.onDisconenctBtn())}onConnectBtn(){c.connect()}async onConnect(t){const e=await s.getWalletData(t);this.setWalletContractData(e);this.setConnectedWallet(t);this.goToState2()}async onMintBtn(){m();document.getElementById("viewOnBlockExplorerBlock").style.display="none";const t=c.selectedAccount;const e=s.getMintTx(t,this.selectedMintAmount);const n=await c.sendTransaction(e);if(n!==false){document.getElementById("viewOnBlockExplorerLink").href=a+"/tx/"+n;document.getElementById("viewOnBlockExplorerBlock").style.display="block";u()}}onDisconenctBtn(){c.disconnect()}onDisconnect(){this.elements.connectedWallet.innerHTML="disconnected";this.goToState1()}}class r{web3Modal=null;provider=null;chainData=null;selectedAccount=null;requiredChainId=1;requiredChainName="Ethereum Mainnet";init(){if(location.protocol!=="https:"){Swal.fire({icon:"error",title:"Insecure protocol",text:`Website is running in an insecure protocol. Please use https:// protocol.`})}const t={walletconnect:{"package":n,options:{infuraId:"8397607a49374de7acb992d7878063cd"}}};this.web3Modal=new e({cacheProvider:true,providerOptions:t,disableInjectedProvider:false})}async connect(){try{this.provider=await this.web3Modal.connect()}catch(t){console.log("Could not get a wallet connection",t);return}this.provider.on("accountsChanged",t=>{this.fetchAccountData()});this.provider.on("chainChanged",t=>{this.fetchAccountData()});this.provider.on("networkChanged",t=>{this.fetchAccountData()});await this.refreshAccountData()}async disconnect(){console.log("Killing the wallet connection",this.provider);if(this.provider.close){await this.provider.close()}await this.web3Modal.clearCachedProvider();this.provider=null;this.selectedAccount=null;o.onDisconnect()}async fetchAccountData(){const t=new Web3(this.provider);o.onDisconnect();const e=await t.eth.getChainId();this.chainData=i.getChain(e);console.log("Connected chain is",this.chainData);if(this.chainData.chainId!==this.requiredChainId){return Swal.fire({icon:"error",title:"Wrong network",text:`Please select ${this.requiredChainName} network in your wallet`})}const n=await t.eth.getAccounts();console.log("Got accounts",n);this.selectedAccount=n[0];console.log("Selected account is",this.selectedAccount);o.onConnect(this.selectedAccount)}async refreshAccountData(){await this.fetchAccountData(this.provider)}async sendTransaction(t){const e=new ethers.providers.Web3Provider(this.provider);const n=e.getSigner();try{const s=await n.sendTransaction(t);return s.hash}catch(i){Swal.fire({icon:"error",text:i.message});console.log("errrr",i.message);return false}}}function m(){$.each($(".particle"),function(){$(this).remove()})}function u(){$.each($(".confetti"),function(){var t=50;console.log("confetticount",t);for(var e=0;e<=t;e++){$(this).append('<span class="particle c'+$.rnd(1,2)+'" style="top:'+$.rnd(10,50)+"%; left:"+$.rnd(0,100)+"%;width:"+$.rnd(6,8)+"px; height:"+$.rnd(3,4)+"px;animation-delay: "+$.rnd(0,30)/10+'s;"></span>')}})}jQuery.rnd=function(t,e){t=parseInt(t);e=parseInt(e);return Math.floor(Math.random()*(e-t+1))+t};window.addEventListener("load",async()=>{c=new r;c.init();s=new t;o=new l;await o.init();if(c.web3Modal.cachedProvider){o.onConnectBtn()}});